generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String             @id @default(cuid())
  name          String?
  email         String?            @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  campaigns     CampaignsOnUsers[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Campaign {
  id         String             @id @default(cuid())
  name       String?
  users      CampaignsOnUsers[]
  encounters Encounter[]
  state      Json
}

model CampaignsOnUsers {
  id         String    @id @default(cuid())
  campaign   Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  user       User?     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail  String
  admin      Boolean
  accepted   DateTime?

  @@unique([campaignId, userEmail])
}

enum EncounterVisibility {
  DRAFT
  OPEN
  CLOSED
}

model Encounter {
  id         String          @id @default(cuid())
  campaign   Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  name       String
  state      Json
  visibility     EncounterVisibility @default(DRAFT)
}
